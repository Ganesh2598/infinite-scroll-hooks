{"version":3,"sources":["Component/Intersection.js","App.js","serviceWorker.js","index.js"],"names":["randomwords","require","config","Intersection","useState","ImageUrl","setImageUrl","ref","useRef","useEffect","observer","IntersectionObserver","isIntersecting","current","fetch","process","then","Response","json","content","disconnect","newData","data","map","obj","images","original","url","prev","root","rootMargin","threshold","observe","unobserve","index","key","src","alt","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sPACIA,EAAcC,EAAQ,IAC1BA,EAAQ,IAAUC,SA6DHC,MA3Df,WAAwB,IAAD,EACcC,mBAAS,IADvB,mBACXC,EADW,KACFC,EADE,KAEbC,EAAMC,mBAoCZ,OAlCAC,qBAAU,WAcV,IAAMC,EAAW,IAAIC,sBAAqB,YAAY,oBACpCC,gBAAkBL,EAAIM,SAZpCC,MAAM,0CAAD,OAA2Cd,IAA3C,oBAAoEe,mCAApE,cACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACGA,GACDT,EAASU,aAEb,IAAMC,EAAUF,EAAQG,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,SAASC,OAC5DrB,GAAY,SAAAsB,GAAI,4BAAQA,GAAR,YAAgBP,YAQtC,CACEQ,KAAO,KACPC,WAAa,MACbC,UAAY,KAKhB,OAHGxB,EAAIM,SACHH,EAASsB,QAAQzB,EAAIM,SAElB,WACCN,EAAIM,SACJH,EAASuB,UAAU1B,EAAIM,YAIjC,CAACR,IAGC,oCACI,+DAGA,8BAEQA,EAASkB,KAAI,SAACI,EAAIO,GACd,OAAQ,yBAAKC,IAAOD,GAChB,yBAAKE,IAAOT,EAAKU,IAAM,qBAKvC,4BAAQ9B,IAAKA,GAAb,iBC5CG+B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cf05524e.chunk.js","sourcesContent":["import React ,{ useRef,useState,useEffect } from 'react'\r\nvar randomwords = require(\"random-words\");\r\nrequire(\"dotenv\").config();\r\n\r\nfunction Intersection(){\r\n    const [ ImageUrl,setImageUrl ] = useState([]);\r\n    const ref = useRef();\r\n\r\n    useEffect(() =>{\r\n        \r\n    function fetchData (){\r\n        fetch(`https://api.giphy.com/v1/gifs/search?q=${randomwords()}&api_key=${process.env.REACT_APP_SECRET}&limit=10`)\r\n            .then(Response => Response.json())\r\n            .then(content => {\r\n                if (!content){\r\n                    observer.disconnect();\r\n                }\r\n                const newData = content.data.map(obj => obj.images.original.url)\r\n                setImageUrl(prev =>([...prev,...newData]));\r\n            })\r\n    }\r\n\r\n    const observer = new IntersectionObserver(([entry]) =>{\r\n            if (entry.isIntersecting && ref.current){\r\n                fetchData();\r\n            }\r\n        },{\r\n            root : null,\r\n            rootMargin : \"0px\",\r\n            threshold : 0.5\r\n        })\r\n        if(ref.current){\r\n            observer.observe(ref.current);\r\n        }\r\n        return () => {\r\n            if (ref.current){\r\n                observer.unobserve(ref.current)\r\n            }\r\n            \r\n        }\r\n    },[ImageUrl])\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                INFINITE SCROLL USING HOOKS\r\n            </header>\r\n            <main>\r\n                {\r\n                    ImageUrl.map((url,index) =>{\r\n                        return (<div key = {index}>\r\n                            <img src = {url} alt = \"please wait\"/>\r\n                        </div>)\r\n                    })\r\n                }\r\n            </main>\r\n            <footer ref={ref}>\r\n                END OF PAGE\r\n            </footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Intersection;","import React from 'react';\nimport './App.css';\nimport Intersection from './Component/Intersection'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Intersection/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}